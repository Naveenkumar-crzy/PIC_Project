

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Apr 29 16:33:24 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     9                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x7E,2
    25     0000                     
    26                           ; Generated 12/10/2023 GMT
    27                           ; 
    28                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F877A Definitions
    58                           ; 
    59                           ; SFR Addresses
    60     0004                     fsr             equ	4
    61     0004                     fsr0            equ	4
    62     0000                     indf            equ	0
    63     0000                     indf0           equ	0
    64     0002                     pc              equ	2
    65     0002                     pcl             equ	2
    66     000A                     pclath          equ	10
    67     0003                     status          equ	3
    68     0000                     INDF            equ	0	;# 
    69     0001                     TMR0            equ	1	;# 
    70     0002                     PCL             equ	2	;# 
    71     0003                     STATUS          equ	3	;# 
    72     0004                     FSR             equ	4	;# 
    73     0005                     PORTA           equ	5	;# 
    74     0006                     PORTB           equ	6	;# 
    75     0007                     PORTC           equ	7	;# 
    76     0008                     PORTD           equ	8	;# 
    77     0009                     PORTE           equ	9	;# 
    78     000A                     PCLATH          equ	10	;# 
    79     000B                     INTCON          equ	11	;# 
    80     000C                     PIR1            equ	12	;# 
    81     000D                     PIR2            equ	13	;# 
    82     000E                     TMR1            equ	14	;# 
    83     000E                     TMR1L           equ	14	;# 
    84     000F                     TMR1H           equ	15	;# 
    85     0010                     T1CON           equ	16	;# 
    86     0011                     TMR2            equ	17	;# 
    87     0012                     T2CON           equ	18	;# 
    88     0013                     SSPBUF          equ	19	;# 
    89     0014                     SSPCON          equ	20	;# 
    90     0015                     CCPR1           equ	21	;# 
    91     0015                     CCPR1L          equ	21	;# 
    92     0016                     CCPR1H          equ	22	;# 
    93     0017                     CCP1CON         equ	23	;# 
    94     0018                     RCSTA           equ	24	;# 
    95     0019                     TXREG           equ	25	;# 
    96     001A                     RCREG           equ	26	;# 
    97     001B                     CCPR2           equ	27	;# 
    98     001B                     CCPR2L          equ	27	;# 
    99     001C                     CCPR2H          equ	28	;# 
   100     001D                     CCP2CON         equ	29	;# 
   101     001E                     ADRESH          equ	30	;# 
   102     001F                     ADCON0          equ	31	;# 
   103     0081                     OPTION_REG      equ	129	;# 
   104     0085                     TRISA           equ	133	;# 
   105     0086                     TRISB           equ	134	;# 
   106     0087                     TRISC           equ	135	;# 
   107     0088                     TRISD           equ	136	;# 
   108     0089                     TRISE           equ	137	;# 
   109     008C                     PIE1            equ	140	;# 
   110     008D                     PIE2            equ	141	;# 
   111     008E                     PCON            equ	142	;# 
   112     0091                     SSPCON2         equ	145	;# 
   113     0092                     PR2             equ	146	;# 
   114     0093                     SSPADD          equ	147	;# 
   115     0094                     SSPSTAT         equ	148	;# 
   116     0098                     TXSTA           equ	152	;# 
   117     0099                     SPBRG           equ	153	;# 
   118     009C                     CMCON           equ	156	;# 
   119     009D                     CVRCON          equ	157	;# 
   120     009E                     ADRESL          equ	158	;# 
   121     009F                     ADCON1          equ	159	;# 
   122     010C                     EEDATA          equ	268	;# 
   123     010D                     EEADR           equ	269	;# 
   124     010E                     EEDATH          equ	270	;# 
   125     010F                     EEADRH          equ	271	;# 
   126     018C                     EECON1          equ	396	;# 
   127     018D                     EECON2          equ	397	;# 
   128     0000                     INDF            equ	0	;# 
   129     0001                     TMR0            equ	1	;# 
   130     0002                     PCL             equ	2	;# 
   131     0003                     STATUS          equ	3	;# 
   132     0004                     FSR             equ	4	;# 
   133     0005                     PORTA           equ	5	;# 
   134     0006                     PORTB           equ	6	;# 
   135     0007                     PORTC           equ	7	;# 
   136     0008                     PORTD           equ	8	;# 
   137     0009                     PORTE           equ	9	;# 
   138     000A                     PCLATH          equ	10	;# 
   139     000B                     INTCON          equ	11	;# 
   140     000C                     PIR1            equ	12	;# 
   141     000D                     PIR2            equ	13	;# 
   142     000E                     TMR1            equ	14	;# 
   143     000E                     TMR1L           equ	14	;# 
   144     000F                     TMR1H           equ	15	;# 
   145     0010                     T1CON           equ	16	;# 
   146     0011                     TMR2            equ	17	;# 
   147     0012                     T2CON           equ	18	;# 
   148     0013                     SSPBUF          equ	19	;# 
   149     0014                     SSPCON          equ	20	;# 
   150     0015                     CCPR1           equ	21	;# 
   151     0015                     CCPR1L          equ	21	;# 
   152     0016                     CCPR1H          equ	22	;# 
   153     0017                     CCP1CON         equ	23	;# 
   154     0018                     RCSTA           equ	24	;# 
   155     0019                     TXREG           equ	25	;# 
   156     001A                     RCREG           equ	26	;# 
   157     001B                     CCPR2           equ	27	;# 
   158     001B                     CCPR2L          equ	27	;# 
   159     001C                     CCPR2H          equ	28	;# 
   160     001D                     CCP2CON         equ	29	;# 
   161     001E                     ADRESH          equ	30	;# 
   162     001F                     ADCON0          equ	31	;# 
   163     0081                     OPTION_REG      equ	129	;# 
   164     0085                     TRISA           equ	133	;# 
   165     0086                     TRISB           equ	134	;# 
   166     0087                     TRISC           equ	135	;# 
   167     0088                     TRISD           equ	136	;# 
   168     0089                     TRISE           equ	137	;# 
   169     008C                     PIE1            equ	140	;# 
   170     008D                     PIE2            equ	141	;# 
   171     008E                     PCON            equ	142	;# 
   172     0091                     SSPCON2         equ	145	;# 
   173     0092                     PR2             equ	146	;# 
   174     0093                     SSPADD          equ	147	;# 
   175     0094                     SSPSTAT         equ	148	;# 
   176     0098                     TXSTA           equ	152	;# 
   177     0099                     SPBRG           equ	153	;# 
   178     009C                     CMCON           equ	156	;# 
   179     009D                     CVRCON          equ	157	;# 
   180     009E                     ADRESL          equ	158	;# 
   181     009F                     ADCON1          equ	159	;# 
   182     010C                     EEDATA          equ	268	;# 
   183     010D                     EEADR           equ	269	;# 
   184     010E                     EEDATH          equ	270	;# 
   185     010F                     EEADRH          equ	271	;# 
   186     018C                     EECON1          equ	396	;# 
   187     018D                     EECON2          equ	397	;# 
   188     0007                     _PORTCbits      set	7
   189     0008                     _PORTDbits      set	8
   190     0013                     _SSPBUF         set	19
   191     0014                     _SSPCON         set	20
   192     0088                     _TRISD          set	136
   193     0086                     _TRISBbits      set	134
   194     0094                     _SSPSTAT        set	148
   195     0093                     _SSPADD         set	147
   196     0091                     _SSPCON2        set	145
   197     048A                     _PEN            set	1162
   198     0488                     _SEN            set	1160
   199     043C                     _TRISC4         set	1084
   200     043B                     _TRISC3         set	1083
   201                           
   202                           	psect	strings
   203     0003                     __pstrings:
   204     0003                     stringtab:
   205     0003                     __stringtab:
   206     0003                     stringcode:	
   207                           ;	String table - string pointers are 1 byte each
   208                           
   209     0003                     stringdir:
   210     0003  3000               	movlw	high stringdir
   211     0004  008A               	movwf	10
   212     0005  0804               	movf	4,w
   213     0006  0A84               	incf	4,f
   214     0007  0782               	addwf	2,f
   215     0008                     __stringbase:
   216     0008  3400               	retlw	0
   217     0009                     __end_of__stringtab:
   218     0009                     STR_3:
   219     0009  3444               	retlw	68	;'D'
   220     000A  346F               	retlw	111	;'o'
   221     000B  346F               	retlw	111	;'o'
   222     000C  3472               	retlw	114	;'r'
   223     000D  3420               	retlw	32	;' '
   224     000E  3463               	retlw	99	;'c'
   225     000F  346C               	retlw	108	;'l'
   226     0010  346F               	retlw	111	;'o'
   227     0011  3473               	retlw	115	;'s'
   228     0012  3465               	retlw	101	;'e'
   229     0013  3464               	retlw	100	;'d'
   230     0014  3400               	retlw	0
   231     0015                     STR_1:
   232     0015  3444               	retlw	68	;'D'
   233     0016  346F               	retlw	111	;'o'
   234     0017  346F               	retlw	111	;'o'
   235     0018  3472               	retlw	114	;'r'
   236     0019  3420               	retlw	32	;' '
   237     001A  344F               	retlw	79	;'O'
   238     001B  3470               	retlw	112	;'p'
   239     001C  3465               	retlw	101	;'e'
   240     001D  346E               	retlw	110	;'n'
   241     001E  3421               	retlw	33	;'!'
   242     001F  3400               	retlw	0
   243     0020                     STR_2:
   244     0020  344C               	retlw	76	;'L'
   245     0021  3469               	retlw	105	;'i'
   246     0022  3467               	retlw	103	;'g'
   247     0023  3468               	retlw	104	;'h'
   248     0024  3474               	retlw	116	;'t'
   249     0025  3420               	retlw	32	;' '
   250     0026  344F               	retlw	79	;'O'
   251     0027  344E               	retlw	78	;'N'
   252     0028  3421               	retlw	33	;'!'
   253     0029  3400               	retlw	0
   254     002A                     STR_5:
   255     002A  344C               	retlw	76	;'L'
   256     002B  3469               	retlw	105	;'i'
   257     002C  3467               	retlw	103	;'g'
   258     002D  3468               	retlw	104	;'h'
   259     002E  3474               	retlw	116	;'t'
   260     002F  3420               	retlw	32	;' '
   261     0030  344F               	retlw	79	;'O'
   262     0031  3446               	retlw	70	;'F'
   263     0032  3446               	retlw	70	;'F'
   264     0033  3400               	retlw	0
   265     0034                     STR_4:
   266     0034  344C               	retlw	76	;'L'
   267     0035  3469               	retlw	105	;'i'
   268     0036  3467               	retlw	103	;'g'
   269     0037  3468               	retlw	104	;'h'
   270     0038  3474               	retlw	116	;'t'
   271     0039  3420               	retlw	32	;' '
   272     003A  344F               	retlw	79	;'O'
   273     003B  344E               	retlw	78	;'N'
   274     003C  3400               	retlw	0
   275                           
   276                           	psect	cinit
   277     07FC                     start_initialization:	
   278                           ; #config settings
   279                           
   280     07FC                     __initialization:
   281     07FC                     end_of_initialization:	
   282                           ;End of C runtime variable initialization code
   283                           
   284     07FC                     __end_of__initialization:
   285     07FC  0183               	clrf	3
   286     07FD  120A  118A  2F57   	ljmp	_main	;jump to C main() function
   287                           
   288                           	psect	cstackCOMMON
   289     0070                     __pcstackCOMMON:
   290     0070                     ?_LCD_Clear:
   291     0070                     ?_I2C_Init:	
   292                           ; 1 bytes @ 0x0
   293                           
   294     0070                     ?_I2C_Wait:	
   295                           ; 1 bytes @ 0x0
   296                           
   297     0070                     ?_I2C_Start:	
   298                           ; 1 bytes @ 0x0
   299                           
   300     0070                     ?_I2C_Stop:	
   301                           ; 1 bytes @ 0x0
   302                           
   303     0070                     ?_I2C_Write:	
   304                           ; 1 bytes @ 0x0
   305                           
   306     0070                     ?_LCD_PulseEnable:	
   307                           ; 1 bytes @ 0x0
   308                           
   309     0070                     ?_LCD_Init:	
   310                           ; 1 bytes @ 0x0
   311                           
   312     0070                     ?_AUTO_MODE:	
   313                           ; 1 bytes @ 0x0
   314                           
   315     0070                     ?_ON_MODE:	
   316                           ; 1 bytes @ 0x0
   317                           
   318     0070                     ?_main:	
   319                           ; 1 bytes @ 0x0
   320                           
   321     0070                     I2C_Write@data:	
   322                           ; 1 bytes @ 0x0
   323                           
   324     0070                     ??_I2C_Init:	
   325                           ; 1 bytes @ 0x0
   326                           
   327     0070                     ??_I2C_Wait:	
   328                           ; 1 bytes @ 0x0
   329                           
   330     0070                     ??_I2C_Start:	
   331                           ; 1 bytes @ 0x0
   332                           
   333     0070                     ??_I2C_Stop:	
   334                           ; 1 bytes @ 0x0
   335                           
   336     0070                     ??_I2C_Write:	
   337                           ; 1 bytes @ 0x0
   338                           
   339                           
   340                           ; 1 bytes @ 0x0
   341     0070                     	ds	1
   342     0071                     ??_LCD_PulseEnable:
   343                           
   344                           ; 1 bytes @ 0x1
   345     0071                     	ds	1
   346     0072                     LCD_PulseEnable@data:
   347                           
   348                           ; 1 bytes @ 0x2
   349     0072                     	ds	1
   350     0073                     ?_LCD_SendNibble:
   351     0073                     LCD_SendNibble@mode:	
   352                           ; 1 bytes @ 0x3
   353                           
   354                           
   355                           ; 1 bytes @ 0x3
   356     0073                     	ds	1
   357     0074                     ??_LCD_SendNibble:
   358                           
   359                           ; 1 bytes @ 0x4
   360     0074                     	ds	1
   361     0075                     LCD_SendNibble@nibble:
   362                           
   363                           ; 1 bytes @ 0x5
   364     0075                     	ds	1
   365     0076                     LCD_SendNibble@data:
   366                           
   367                           ; 1 bytes @ 0x6
   368     0076                     	ds	1
   369     0077                     ?_LCD_SendByte:
   370     0077                     LCD_SendByte@mode:	
   371                           ; 1 bytes @ 0x7
   372                           
   373                           
   374                           ; 1 bytes @ 0x7
   375     0077                     	ds	1
   376     0078                     ??_LCD_SendByte:
   377                           
   378                           ; 1 bytes @ 0x8
   379     0078                     	ds	1
   380     0079                     LCD_SendByte@value:
   381                           
   382                           ; 1 bytes @ 0x9
   383     0079                     	ds	1
   384     007A                     ?_LCD_SetCursor:
   385     007A                     ?_LCD_Print:	
   386                           ; 1 bytes @ 0xA
   387                           
   388     007A                     LCD_SetCursor@col:	
   389                           ; 1 bytes @ 0xA
   390                           
   391     007A                     LCD_Print@str:	
   392                           ; 1 bytes @ 0xA
   393                           
   394     007A                     ??_LCD_Clear:	
   395                           ; 1 bytes @ 0xA
   396                           
   397                           
   398                           ; 1 bytes @ 0xA
   399     007A                     	ds	1
   400     007B                     ??_LCD_SetCursor:
   401     007B                     ??_LCD_Print:	
   402                           ; 1 bytes @ 0xB
   403                           
   404                           
   405                           ; 1 bytes @ 0xB
   406     007B                     	ds	1
   407     007C                     ??_AUTO_MODE:
   408     007C                     ??_ON_MODE:	
   409                           ; 1 bytes @ 0xC
   410                           
   411                           
   412                           	psect	cstackBANK0
   413     0020                     __pcstackBANK0:	
   414                           ; 1 bytes @ 0xC
   415                           
   416     0020                     LCD_SetCursor@row:
   417     0020                     ??_LCD_Init:	
   418                           ; 1 bytes @ 0x0
   419                           
   420                           
   421                           ; 1 bytes @ 0x0
   422     0020                     	ds	1
   423     0021                     _LCD_SetCursor$133:
   424                           
   425                           ; 2 bytes @ 0x1
   426     0021                     	ds	2
   427     0023                     LCD_SetCursor@addr:
   428                           
   429                           ; 1 bytes @ 0x3
   430     0023                     	ds	1
   431     0024                     ??_main:
   432                           
   433                           ; 1 bytes @ 0x4
   434     0024                     	ds	3
   435                           
   436                           	psect	maintext
   437     0757                     __pmaintext:	
   438 ;;
   439 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   440 ;;
   441 ;; *************** function _main *****************
   442 ;; Defined at:
   443 ;;		line 156 in file "main.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;		None
   446 ;; Auto vars:     Size  Location     Type
   447 ;;		None
   448 ;; Return value:  Size  Location     Type
   449 ;;                  1    wreg      void 
   450 ;; Registers used:
   451 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   452 ;; Tracked objects:
   453 ;;		On entry : B00/0
   454 ;;		On exit  : 0/0
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   457 ;;      Params:         0       0       0       0       0
   458 ;;      Locals:         0       0       0       0       0
   459 ;;      Temps:          0       3       0       0       0
   460 ;;      Totals:         0       3       0       0       0
   461 ;;Total ram usage:        3 bytes
   462 ;; Hardware stack levels required when called: 7
   463 ;; This function calls:
   464 ;;		_AUTO_MODE
   465 ;;		_I2C_Init
   466 ;;		_LCD_Init
   467 ;;		_LCD_Print
   468 ;;		_LCD_SetCursor
   469 ;;		_ON_MODE
   470 ;; This function is called by:
   471 ;;		Startup code after reset
   472 ;; This function uses a non-reentrant model
   473 ;;
   474                           
   475     0757                     _main:	
   476                           ;psect for function _main
   477                           
   478     0757                     l864:	
   479                           ;incstack = 0
   480                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   481                           
   482                           
   483                           ;main.c: 157:         {
   484     0757  1683               	bsf	3,5	;RP0=1, select bank1
   485     0758  1303               	bcf	3,6	;RP1=0, select bank1
   486     0759  1006               	bcf	6,0	;volatile
   487                           
   488                           ;main.c: 158:            LCD_SetCursor(3, 1);
   489     075A  30FF               	movlw	255
   490     075B  0088               	movwf	8	;volatile
   491     075C                     l866:
   492                           
   493                           ;main.c: 159:     LCD_Print("Light OFF");
   494     075C  120A  118A  263C  120A  118A  	fcall	_I2C_Init
   495     0761                     l868:
   496                           
   497                           ;main.c: 160:         }
   498     0761  120A  118A  27A6  120A  118A  	fcall	_LCD_Init
   499     0766                     l870:
   500     0766  1283               	bcf	3,5	;RP0=0, select bank0
   501     0767  1303               	bcf	3,6	;RP1=0, select bank0
   502     0768  1C88               	btfss	8,1	;volatile
   503     0769  2F6B               	goto	u261
   504     076A  2F6C               	goto	u260
   505     076B                     u261:
   506     076B  2F71               	goto	l874
   507     076C                     u260:
   508     076C                     l872:
   509     076C  120A  118A  270A  120A  118A  	fcall	_AUTO_MODE
   510     0771                     l874:
   511     0771  1283               	bcf	3,5	;RP0=0, select bank0
   512     0772  1303               	bcf	3,6	;RP1=0, select bank0
   513     0773  1D08               	btfss	8,2	;volatile
   514     0774  2F76               	goto	u271
   515     0775  2F77               	goto	u270
   516     0776                     u271:
   517     0776  2F7D               	goto	l93
   518     0777                     u270:
   519     0777                     l876:
   520     0777  120A  118A  266F  120A  118A  	fcall	_ON_MODE
   521     077C  2F7E               	goto	l94
   522     077D                     l93:
   523     077D  1287               	bcf	7,5	;volatile
   524     077E                     l94:
   525     077E  1283               	bcf	3,5	;RP0=0, select bank0
   526     077F  1303               	bcf	3,6	;RP1=0, select bank0
   527     0780  1C08               	btfss	8,0	;volatile
   528     0781  2F83               	goto	u281
   529     0782  2F84               	goto	u280
   530     0783                     u281:
   531     0783  2F93               	goto	l882
   532     0784                     u280:
   533     0784                     l878:
   534     0784  01FA               	clrf	LCD_SetCursor@col
   535     0785  0AFA               	incf	LCD_SetCursor@col,f
   536     0786  3003               	movlw	3
   537     0787  120A  118A  26C2  120A  118A  	fcall	_LCD_SetCursor
   538     078C                     l880:
   539     078C  3022               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   540     078D  00FA               	movwf	LCD_Print@str
   541     078E  120A  118A  26A4  120A  118A  	fcall	_LCD_Print
   542     0793                     l882:
   543     0793  300D               	movlw	13
   544     0794  1283               	bcf	3,5	;RP0=0, select bank0
   545     0795  1303               	bcf	3,6	;RP1=0, select bank0
   546     0796  00A6               	movwf	??_main+2
   547     0797  30AF               	movlw	175
   548     0798  00A5               	movwf	??_main+1
   549     0799  30B5               	movlw	181
   550     079A  00A4               	movwf	??_main
   551     079B                     u297:
   552     079B  0BA4               	decfsz	??_main,f
   553     079C  2F9B               	goto	u297
   554     079D  0BA5               	decfsz	??_main+1,f
   555     079E  2F9B               	goto	u297
   556     079F  0BA6               	decfsz	??_main+2,f
   557     07A0  2F9B               	goto	u297
   558     07A1  2FA2               	nop2
   559     07A2  2F66               	goto	l870
   560     07A3  120A  118A  2800   	ljmp	start
   561     07A6                     __end_of_main:
   562                           
   563                           	psect	text1
   564     066F                     __ptext1:	
   565 ;; *************** function _ON_MODE *****************
   566 ;; Defined at:
   567 ;;		line 142 in file "main.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;		None
   570 ;; Auto vars:     Size  Location     Type
   571 ;;		None
   572 ;; Return value:  Size  Location     Type
   573 ;;                  1    wreg      void 
   574 ;; Registers used:
   575 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   576 ;; Tracked objects:
   577 ;;		On entry : 0/0
   578 ;;		On exit  : 0/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   581 ;;      Params:         0       0       0       0       0
   582 ;;      Locals:         0       0       0       0       0
   583 ;;      Temps:          0       0       0       0       0
   584 ;;      Totals:         0       0       0       0       0
   585 ;;Total ram usage:        0 bytes
   586 ;; Hardware stack levels used: 1
   587 ;; Hardware stack levels required when called: 6
   588 ;; This function calls:
   589 ;;		_LCD_Clear
   590 ;;		_LCD_Print
   591 ;;		_LCD_SetCursor
   592 ;; This function is called by:
   593 ;;		_main
   594 ;; This function uses a non-reentrant model
   595 ;;
   596                           
   597     066F                     _ON_MODE:	
   598                           ;psect for function _ON_MODE
   599                           
   600     066F                     l858:	
   601                           ;incstack = 0
   602                           ; Regs used in _ON_MODE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   603                           
   604                           
   605                           ;main.c: 144:         };main.c: 145: 
   606     066F  120A  118A  2649  120A  118A  	fcall	_LCD_Clear
   607                           
   608                           ;main.c: 146:         if (PORTDbits.RD2 ==1)
   609     0674  01FA               	clrf	LCD_SetCursor@col
   610     0675  0AFA               	incf	LCD_SetCursor@col,f
   611     0676  3003               	movlw	3
   612     0677  120A  118A  26C2  120A  118A  	fcall	_LCD_SetCursor
   613     067C                     l860:
   614                           
   615                           ;main.c: 147: 
   616     067C  302C               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   617     067D  00FA               	movwf	LCD_Print@str
   618     067E  120A  118A  26A4  120A  118A  	fcall	_LCD_Print
   619     0683                     l862:
   620                           
   621                           ;main.c: 148:         {
   622     0683  1283               	bcf	3,5	;RP0=0, select bank0
   623     0684  1303               	bcf	3,6	;RP1=0, select bank0
   624     0685  1687               	bsf	7,5	;volatile
   625     0686                     l86:
   626     0686  0008               	return
   627     0687                     __end_of_ON_MODE:
   628                           
   629                           	psect	text2
   630     07A6                     __ptext2:	
   631 ;; *************** function _LCD_Init *****************
   632 ;; Defined at:
   633 ;;		line 91 in file "main.c"
   634 ;; Parameters:    Size  Location     Type
   635 ;;		None
   636 ;; Auto vars:     Size  Location     Type
   637 ;;		None
   638 ;; Return value:  Size  Location     Type
   639 ;;                  1    wreg      void 
   640 ;; Registers used:
   641 ;;		wreg, status,2, status,0, pclath, cstack
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   647 ;;      Params:         0       0       0       0       0
   648 ;;      Locals:         0       0       0       0       0
   649 ;;      Temps:          0       3       0       0       0
   650 ;;      Totals:         0       3       0       0       0
   651 ;;Total ram usage:        3 bytes
   652 ;; Hardware stack levels used: 1
   653 ;; Hardware stack levels required when called: 6
   654 ;; This function calls:
   655 ;;		_LCD_Clear
   656 ;;		_LCD_SendByte
   657 ;;		_LCD_SendNibble
   658 ;; This function is called by:
   659 ;;		_main
   660 ;; This function uses a non-reentrant model
   661 ;;
   662                           
   663     07A6                     _LCD_Init:	
   664                           ;psect for function _LCD_Init
   665                           
   666     07A6                     l818:	
   667                           ;incstack = 0
   668                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
   669                           
   670                           
   671                           ;main.c: 92:     while(*str) {
   672     07A6  3002               	movlw	2
   673     07A7  1283               	bcf	3,5	;RP0=0, select bank0
   674     07A8  1303               	bcf	3,6	;RP1=0, select bank0
   675     07A9  00A2               	movwf	??_LCD_Init+2
   676     07AA  3045               	movlw	69
   677     07AB  00A1               	movwf	??_LCD_Init+1
   678     07AC  30A9               	movlw	169
   679     07AD  00A0               	movwf	??_LCD_Init
   680     07AE                     u307:
   681     07AE  0BA0               	decfsz	??_LCD_Init,f
   682     07AF  2FAE               	goto	u307
   683     07B0  0BA1               	decfsz	??_LCD_Init+1,f
   684     07B1  2FAE               	goto	u307
   685     07B2  0BA2               	decfsz	??_LCD_Init+2,f
   686     07B3  2FAE               	goto	u307
   687     07B4                     l820:
   688                           
   689                           ;main.c: 93:         LCD_SendByte(*str++, 1);
   690     07B4  01F3               	clrf	LCD_SendNibble@mode
   691     07B5  3030               	movlw	48
   692     07B6  120A  118A  265A  120A  118A  	fcall	_LCD_SendNibble
   693     07BB                     l822:
   694                           
   695                           ;main.c: 94:     }
   696     07BB  3021               	movlw	33
   697     07BC  1283               	bcf	3,5	;RP0=0, select bank0
   698     07BD  1303               	bcf	3,6	;RP1=0, select bank0
   699     07BE  00A1               	movwf	??_LCD_Init+1
   700     07BF  3075               	movlw	117
   701     07C0  00A0               	movwf	??_LCD_Init
   702     07C1                     u317:
   703     07C1  0BA0               	decfsz	??_LCD_Init,f
   704     07C2  2FC1               	goto	u317
   705     07C3  0BA1               	decfsz	??_LCD_Init+1,f
   706     07C4  2FC1               	goto	u317
   707     07C5  2FC6               	nop2
   708                           
   709                           ;main.c: 95: }
   710     07C6  01F3               	clrf	LCD_SendNibble@mode
   711     07C7  3030               	movlw	48
   712     07C8  120A  118A  265A  120A  118A  	fcall	_LCD_SendNibble
   713     07CD                     l824:
   714                           
   715                           ;main.c: 96:  void AUTO_MODE(){
   716     07CD  30F9               	movlw	249
   717     07CE  1283               	bcf	3,5	;RP0=0, select bank0
   718     07CF  1303               	bcf	3,6	;RP1=0, select bank0
   719     07D0  00A0               	movwf	??_LCD_Init
   720     07D1                     u327:
   721     07D1  0BA0               	decfsz	??_LCD_Init,f
   722     07D2  2FD1               	goto	u327
   723     07D3                     l826:
   724                           
   725                           ;main.c: 97: 
   726     07D3  01F3               	clrf	LCD_SendNibble@mode
   727     07D4  3030               	movlw	48
   728     07D5  120A  118A  265A  120A  118A  	fcall	_LCD_SendNibble
   729     07DA                     l828:
   730                           
   731                           ;main.c: 98:         if (PORTDbits.RD3== 1 ||PORTDbits.RD4== 1 ||PORTDbits.RD5== 1 ||POR
      +                          TDbits.RD6== 1 )
   732     07DA  01F3               	clrf	LCD_SendNibble@mode
   733     07DB  3020               	movlw	32
   734     07DC  120A  118A  265A  120A  118A  	fcall	_LCD_SendNibble
   735     07E1                     l830:
   736                           
   737                           ;main.c: 100:              PORTCbits.RC5 = 1;
   738     07E1  01F7               	clrf	LCD_SendByte@mode
   739     07E2  3028               	movlw	40
   740     07E3  120A  118A  2687  120A  118A  	fcall	_LCD_SendByte
   741     07E8                     l832:
   742                           
   743                           ;main.c: 101:               LCD_Clear();
   744     07E8  01F7               	clrf	LCD_SendByte@mode
   745     07E9  300C               	movlw	12
   746     07EA  120A  118A  2687  120A  118A  	fcall	_LCD_SendByte
   747     07EF                     l834:
   748                           
   749                           ;main.c: 102:              LCD_SetCursor(1, 0);
   750     07EF  01F7               	clrf	LCD_SendByte@mode
   751     07F0  3006               	movlw	6
   752     07F1  120A  118A  2687  120A  118A  	fcall	_LCD_SendByte
   753     07F6                     l836:
   754                           
   755                           ;main.c: 103:     LCD_Print("Door Open!");
   756     07F6  120A  118A  2649  120A  118A  	fcall	_LCD_Clear
   757     07FB                     l60:
   758     07FB  0008               	return
   759     07FC                     __end_of_LCD_Init:
   760                           
   761                           	psect	text3
   762     063C                     __ptext3:	
   763 ;; *************** function _I2C_Init *****************
   764 ;; Defined at:
   765 ;;		line 40 in file "main.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;		None
   768 ;; Auto vars:     Size  Location     Type
   769 ;;		None
   770 ;; Return value:  Size  Location     Type
   771 ;;                  1    wreg      void 
   772 ;; Registers used:
   773 ;;		status,2
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   779 ;;      Params:         0       0       0       0       0
   780 ;;      Locals:         0       0       0       0       0
   781 ;;      Temps:          0       0       0       0       0
   782 ;;      Totals:         0       0       0       0       0
   783 ;;Total ram usage:        0 bytes
   784 ;; Hardware stack levels used: 1
   785 ;; This function calls:
   786 ;;		Nothing
   787 ;; This function is called by:
   788 ;;		_main
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792     063C                     _I2C_Init:	
   793                           ;psect for function _I2C_Init
   794                           
   795     063C                     l692:	
   796                           ;incstack = 0
   797                           ; Regs used in _I2C_Init: [status,2]
   798                           
   799                           
   800                           ;main.c: 41: }
   801     063C  3028               	movlw	40
   802     063D  1283               	bcf	3,5	;RP0=0, select bank0
   803     063E  1303               	bcf	3,6	;RP1=0, select bank0
   804     063F  0094               	movwf	20	;volatile
   805     0640                     l694:
   806                           
   807                           ;main.c: 42: 
   808     0640  1683               	bsf	3,5	;RP0=1, select bank1
   809     0641  1303               	bcf	3,6	;RP1=0, select bank1
   810     0642  0191               	clrf	17	;volatile
   811     0643                     l696:
   812                           
   813                           ;main.c: 43: 
   814     0643  3031               	movlw	49
   815     0644  0093               	movwf	19	;volatile
   816                           
   817                           ;main.c: 44: 
   818     0645  0194               	clrf	20	;volatile
   819     0646                     l698:
   820                           
   821                           ;main.c: 45: 
   822     0646  1587               	bsf	7,3	;volatile
   823     0647                     l700:
   824                           
   825                           ;main.c: 46: void LCD_PulseEnable(unsigned char data) {
   826     0647  1607               	bsf	7,4	;volatile
   827     0648                     l33:
   828     0648  0008               	return
   829     0649                     __end_of_I2C_Init:
   830                           
   831                           	psect	text4
   832     070A                     __ptext4:	
   833 ;; *************** function _AUTO_MODE *****************
   834 ;; Defined at:
   835 ;;		line 121 in file "main.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;		None
   838 ;; Auto vars:     Size  Location     Type
   839 ;;		None
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   849 ;;      Params:         0       0       0       0       0
   850 ;;      Locals:         0       0       0       0       0
   851 ;;      Temps:          0       0       0       0       0
   852 ;;      Totals:         0       0       0       0       0
   853 ;;Total ram usage:        0 bytes
   854 ;; Hardware stack levels used: 1
   855 ;; Hardware stack levels required when called: 6
   856 ;; This function calls:
   857 ;;		_LCD_Clear
   858 ;;		_LCD_Print
   859 ;;		_LCD_SetCursor
   860 ;; This function is called by:
   861 ;;		_main
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865     070A                     _AUTO_MODE:	
   866                           ;psect for function _AUTO_MODE
   867                           
   868     070A                     l838:	
   869                           ;incstack = 0
   870                           ; Regs used in _AUTO_MODE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   871                           
   872                           
   873                           ;main.c: 123:      PORTCbits.RC5 = 1;
   874     070A  1283               	bcf	3,5	;RP0=0, select bank0
   875     070B  1303               	bcf	3,6	;RP1=0, select bank0
   876     070C  1988               	btfsc	8,3	;volatile
   877     070D  2F0F               	goto	u221
   878     070E  2F10               	goto	u220
   879     070F                     u221:
   880     070F  2F1C               	goto	l81
   881     0710                     u220:
   882     0710                     l840:
   883     0710  1A08               	btfsc	8,4	;volatile
   884     0711  2F13               	goto	u231
   885     0712  2F14               	goto	u230
   886     0713                     u231:
   887     0713  2F1C               	goto	l81
   888     0714                     u230:
   889     0714                     l842:
   890     0714  1A88               	btfsc	8,5	;volatile
   891     0715  2F17               	goto	u241
   892     0716  2F18               	goto	u240
   893     0717                     u241:
   894     0717  2F1C               	goto	l81
   895     0718                     u240:
   896     0718                     l844:
   897     0718  1F08               	btfss	8,6	;volatile
   898     0719  2F1B               	goto	u251
   899     071A  2F1C               	goto	u250
   900     071B                     u251:
   901     071B  2F40               	goto	l852
   902     071C                     u250:
   903     071C                     l81:
   904                           
   905                           ;main.c: 124:              };main.c: 125: 
   906     071C  1687               	bsf	7,5	;volatile
   907     071D                     l846:
   908                           
   909                           ;main.c: 126:     }
   910     071D  120A  118A  2649  120A  118A  	fcall	_LCD_Clear
   911                           
   912                           ;main.c: 127: 
   913     0722  01FA               	clrf	LCD_SetCursor@col
   914     0723  3001               	movlw	1
   915     0724  120A  118A  26C2  120A  118A  	fcall	_LCD_SetCursor
   916     0729                     l848:
   917                           
   918                           ;main.c: 128: 
   919     0729  300D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   920     072A  00FA               	movwf	LCD_Print@str
   921     072B  120A  118A  26A4  120A  118A  	fcall	_LCD_Print
   922     0730                     l850:
   923                           
   924                           ;main.c: 129: 
   925     0730  01FA               	clrf	LCD_SetCursor@col
   926     0731  0AFA               	incf	LCD_SetCursor@col,f
   927     0732  3003               	movlw	3
   928     0733  120A  118A  26C2  120A  118A  	fcall	_LCD_SetCursor
   929                           
   930                           ;main.c: 130: 
   931     0738  3018               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   932     0739  00FA               	movwf	LCD_Print@str
   933     073A  120A  118A  26A4  120A  118A  	fcall	_LCD_Print
   934                           
   935                           ;main.c: 132:     TRISBbits.TRISB0 = 0;
   936     073F  2F56               	goto	l83
   937     0740                     l852:
   938                           
   939                           ;main.c: 134:     I2C_Init();
   940     0740  120A  118A  2649  120A  118A  	fcall	_LCD_Clear
   941                           
   942                           ;main.c: 135:     LCD_Init();
   943     0745  01FA               	clrf	LCD_SetCursor@col
   944     0746  3001               	movlw	1
   945     0747  120A  118A  26C2  120A  118A  	fcall	_LCD_SetCursor
   946     074C                     l854:
   947                           
   948                           ;main.c: 136: 
   949     074C  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   950     074D  00FA               	movwf	LCD_Print@str
   951     074E  120A  118A  26A4  120A  118A  	fcall	_LCD_Print
   952     0753                     l856:
   953                           
   954                           ;main.c: 139:     while (1)
   955     0753  1283               	bcf	3,5	;RP0=0, select bank0
   956     0754  1303               	bcf	3,6	;RP1=0, select bank0
   957     0755  1287               	bcf	7,5	;volatile
   958     0756                     l83:
   959     0756  0008               	return
   960     0757                     __end_of_AUTO_MODE:
   961                           
   962                           	psect	text5
   963     06C2                     __ptext5:	
   964 ;; *************** function _LCD_SetCursor *****************
   965 ;; Defined at:
   966 ;;		line 111 in file "main.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;  row             1    wreg     unsigned char 
   969 ;;  col             1   10[COMMON] unsigned char 
   970 ;; Auto vars:     Size  Location     Type
   971 ;;  row             1    0[BANK0 ] unsigned char 
   972 ;;  addr            1    3[BANK0 ] unsigned char 
   973 ;; Return value:  Size  Location     Type
   974 ;;                  1    wreg      void 
   975 ;; Registers used:
   976 ;;		wreg, status,2, status,0, pclath, cstack
   977 ;; Tracked objects:
   978 ;;		On entry : 0/0
   979 ;;		On exit  : 0/0
   980 ;;		Unchanged: 0/0
   981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   982 ;;      Params:         1       0       0       0       0
   983 ;;      Locals:         0       4       0       0       0
   984 ;;      Temps:          0       0       0       0       0
   985 ;;      Totals:         1       4       0       0       0
   986 ;;Total ram usage:        5 bytes
   987 ;; Hardware stack levels used: 1
   988 ;; Hardware stack levels required when called: 5
   989 ;; This function calls:
   990 ;;		_LCD_SendByte
   991 ;; This function is called by:
   992 ;;		_AUTO_MODE
   993 ;;		_ON_MODE
   994 ;;		_main
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998     06C2                     _LCD_SetCursor:	
   999                           ;psect for function _LCD_SetCursor
  1000                           
  1001                           
  1002                           ;incstack = 0
  1003                           ; Regs used in _LCD_SetCursor: [wreg+status,2+status,0+pclath+cstack]
  1004                           ;LCD_SetCursor@row stored from wreg
  1005     06C2  1283               	bcf	3,5	;RP0=0, select bank0
  1006     06C3  1303               	bcf	3,6	;RP1=0, select bank0
  1007     06C4  00A0               	movwf	LCD_SetCursor@row
  1008     06C5                     l802:
  1009                           
  1010                           ;main.c: 112: 
  1011     06C5  0320               	decf	LCD_SetCursor@row,w
  1012     06C6  1903               	btfsc	3,2
  1013     06C7  2EC9               	goto	u201
  1014     06C8  2ECA               	goto	u200
  1015     06C9                     u201:
  1016     06C9  2ED2               	goto	l806
  1017     06CA                     u200:
  1018     06CA                     l804:
  1019     06CA  087A               	movf	LCD_SetCursor@col,w
  1020     06CB  3EC0               	addlw	192
  1021     06CC  00A1               	movwf	_LCD_SetCursor$133
  1022     06CD  3000               	movlw	0
  1023     06CE  1803               	skipnc
  1024     06CF  3001               	movlw	1
  1025     06D0  00A2               	movwf	_LCD_SetCursor$133+1
  1026     06D1  2ED9               	goto	l69
  1027     06D2                     l806:
  1028     06D2  087A               	movf	LCD_SetCursor@col,w
  1029     06D3  3E80               	addlw	128
  1030     06D4  00A1               	movwf	_LCD_SetCursor$133
  1031     06D5  3000               	movlw	0
  1032     06D6  1803               	skipnc
  1033     06D7  3001               	movlw	1
  1034     06D8  00A2               	movwf	_LCD_SetCursor$133+1
  1035     06D9                     l69:
  1036     06D9  0821               	movf	_LCD_SetCursor$133,w
  1037     06DA  00A3               	movwf	LCD_SetCursor@addr
  1038     06DB                     l808:
  1039                           
  1040                           ;main.c: 113: 
  1041     06DB  01F7               	clrf	LCD_SendByte@mode
  1042     06DC  0823               	movf	LCD_SetCursor@addr,w
  1043     06DD  120A  118A  2687  120A  118A  	fcall	_LCD_SendByte
  1044     06E2                     l70:
  1045     06E2  0008               	return
  1046     06E3                     __end_of_LCD_SetCursor:
  1047                           
  1048                           	psect	text6
  1049     06A4                     __ptext6:	
  1050 ;; *************** function _LCD_Print *****************
  1051 ;; Defined at:
  1052 ;;		line 116 in file "main.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;  str             1   10[COMMON] PTR const unsigned char 
  1055 ;;		 -> STR_5(10), STR_4(9), STR_3(12), STR_2(10), 
  1056 ;;		 -> STR_1(11), 
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;		None
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1068 ;;      Params:         1       0       0       0       0
  1069 ;;      Locals:         0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0
  1071 ;;      Totals:         1       0       0       0       0
  1072 ;;Total ram usage:        1 bytes
  1073 ;; Hardware stack levels used: 1
  1074 ;; Hardware stack levels required when called: 5
  1075 ;; This function calls:
  1076 ;;		_LCD_SendByte
  1077 ;; This function is called by:
  1078 ;;		_AUTO_MODE
  1079 ;;		_ON_MODE
  1080 ;;		_main
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084     06A4                     _LCD_Print:	
  1085                           ;psect for function _LCD_Print
  1086                           
  1087     06A4                     l810:	
  1088                           ;incstack = 0
  1089                           ; Regs used in _LCD_Print: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1090                           
  1091                           
  1092                           ;main.c: 117:    void ON_MODE ()
  1093     06A4  2EB5               	goto	l816
  1094     06A5                     l812:
  1095                           
  1096                           ;main.c: 118:     {
  1097     06A5  01F7               	clrf	LCD_SendByte@mode
  1098     06A6  0AF7               	incf	LCD_SendByte@mode,f
  1099     06A7  087A               	movf	LCD_Print@str,w
  1100     06A8  0084               	movwf	4
  1101     06A9  120A  118A  2003  120A  118A  	fcall	stringdir
  1102     06AE  120A  118A  2687  120A  118A  	fcall	_LCD_SendByte
  1103     06B3                     l814:
  1104     06B3  3001               	movlw	1
  1105     06B4  07FA               	addwf	LCD_Print@str,f
  1106     06B5                     l816:
  1107                           
  1108                           ;main.c: 117:    void ON_MODE ()
  1109     06B5  087A               	movf	LCD_Print@str,w
  1110     06B6  0084               	movwf	4
  1111     06B7  120A  118A  2003  120A  118A  	fcall	stringdir
  1112     06BC  3A00               	xorlw	0
  1113     06BD  1D03               	skipz
  1114     06BE  2EC0               	goto	u211
  1115     06BF  2EC1               	goto	u210
  1116     06C0                     u211:
  1117     06C0  2EA5               	goto	l812
  1118     06C1                     u210:
  1119     06C1                     l76:
  1120     06C1  0008               	return
  1121     06C2                     __end_of_LCD_Print:
  1122                           
  1123                           	psect	text7
  1124     0649                     __ptext7:	
  1125 ;; *************** function _LCD_Clear *****************
  1126 ;; Defined at:
  1127 ;;		line 106 in file "main.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;		None
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, status,2, status,0, pclath, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1141 ;;      Params:         0       0       0       0       0
  1142 ;;      Locals:         0       0       0       0       0
  1143 ;;      Temps:          2       0       0       0       0
  1144 ;;      Totals:         2       0       0       0       0
  1145 ;;Total ram usage:        2 bytes
  1146 ;; Hardware stack levels used: 1
  1147 ;; Hardware stack levels required when called: 5
  1148 ;; This function calls:
  1149 ;;		_LCD_SendByte
  1150 ;; This function is called by:
  1151 ;;		_LCD_Init
  1152 ;;		_AUTO_MODE
  1153 ;;		_ON_MODE
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157     0649                     _LCD_Clear:	
  1158                           ;psect for function _LCD_Clear
  1159                           
  1160     0649                     l798:	
  1161                           ;incstack = 0
  1162                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  1163                           
  1164                           
  1165                           ;main.c: 107:         }
  1166     0649  01F7               	clrf	LCD_SendByte@mode
  1167     064A  3001               	movlw	1
  1168     064B  120A  118A  2687  120A  118A  	fcall	_LCD_SendByte
  1169     0650                     l800:
  1170                           
  1171                           ;main.c: 108:         else
  1172     0650  300D               	movlw	13
  1173     0651  00FB               	movwf	??_LCD_Clear+1
  1174     0652  30FB               	movlw	251
  1175     0653  00FA               	movwf	??_LCD_Clear
  1176     0654                     u337:
  1177     0654  0BFA               	decfsz	??_LCD_Clear,f
  1178     0655  2E54               	goto	u337
  1179     0656  0BFB               	decfsz	??_LCD_Clear+1,f
  1180     0657  2E54               	goto	u337
  1181     0658  2E59               	nop2
  1182     0659                     l63:
  1183     0659  0008               	return
  1184     065A                     __end_of_LCD_Clear:
  1185                           
  1186                           	psect	text8
  1187     0687                     __ptext8:	
  1188 ;; *************** function _LCD_SendByte *****************
  1189 ;; Defined at:
  1190 ;;		line 86 in file "main.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;  value           1    wreg     unsigned char 
  1193 ;;  mode            1    7[COMMON] unsigned char 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;  value           1    9[COMMON] unsigned char 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  1    wreg      void 
  1198 ;; Registers used:
  1199 ;;		wreg, status,2, status,0, pclath, cstack
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1205 ;;      Params:         1       0       0       0       0
  1206 ;;      Locals:         1       0       0       0       0
  1207 ;;      Temps:          1       0       0       0       0
  1208 ;;      Totals:         3       0       0       0       0
  1209 ;;Total ram usage:        3 bytes
  1210 ;; Hardware stack levels used: 1
  1211 ;; Hardware stack levels required when called: 4
  1212 ;; This function calls:
  1213 ;;		_LCD_SendNibble
  1214 ;; This function is called by:
  1215 ;;		_LCD_Init
  1216 ;;		_LCD_Clear
  1217 ;;		_LCD_SetCursor
  1218 ;;		_LCD_Print
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222     0687                     _LCD_SendByte:	
  1223                           ;psect for function _LCD_SendByte
  1224                           
  1225                           
  1226                           ;incstack = 0
  1227                           ; Regs used in _LCD_SendByte: [wreg+status,2+status,0+pclath+cstack]
  1228                           ;LCD_SendByte@value stored from wreg
  1229     0687  00F9               	movwf	LCD_SendByte@value
  1230     0688                     l796:
  1231                           
  1232                           ;main.c: 87:     unsigned char addr = (row == 1) ? 0x80 + col : 0xC0 + col;
  1233     0688  0877               	movf	LCD_SendByte@mode,w
  1234     0689  00F3               	movwf	LCD_SendNibble@mode
  1235     068A  0879               	movf	LCD_SendByte@value,w
  1236     068B  39F0               	andlw	240
  1237     068C  120A  118A  265A  120A  118A  	fcall	_LCD_SendNibble
  1238                           
  1239                           ;main.c: 88:     LCD_SendByte(addr, 0);
  1240     0691  0877               	movf	LCD_SendByte@mode,w
  1241     0692  00F3               	movwf	LCD_SendNibble@mode
  1242     0693  0879               	movf	LCD_SendByte@value,w
  1243     0694  00F8               	movwf	??_LCD_SendByte
  1244     0695  3003               	movlw	3
  1245     0696                     u195:
  1246     0696  1003               	clrc
  1247     0697  0DF8               	rlf	??_LCD_SendByte,f
  1248     0698  3EFF               	addlw	-1
  1249     0699  1D03               	skipz
  1250     069A  2E96               	goto	u195
  1251     069B  1003               	clrc
  1252     069C  0D78               	rlf	??_LCD_SendByte,w
  1253     069D  39F0               	andlw	240
  1254     069E  120A  118A  265A  120A  118A  	fcall	_LCD_SendNibble
  1255     06A3                     l57:
  1256     06A3  0008               	return
  1257     06A4                     __end_of_LCD_SendByte:
  1258                           
  1259                           	psect	text9
  1260     065A                     __ptext9:	
  1261 ;; *************** function _LCD_SendNibble *****************
  1262 ;; Defined at:
  1263 ;;		line 81 in file "main.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;  nibble          1    wreg     unsigned char 
  1266 ;;  mode            1    3[COMMON] unsigned char 
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;  nibble          1    5[COMMON] unsigned char 
  1269 ;;  data            1    6[COMMON] unsigned char 
  1270 ;; Return value:  Size  Location     Type
  1271 ;;                  1    wreg      void 
  1272 ;; Registers used:
  1273 ;;		wreg, status,2, status,0, pclath, cstack
  1274 ;; Tracked objects:
  1275 ;;		On entry : 0/0
  1276 ;;		On exit  : 0/0
  1277 ;;		Unchanged: 0/0
  1278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1279 ;;      Params:         1       0       0       0       0
  1280 ;;      Locals:         2       0       0       0       0
  1281 ;;      Temps:          1       0       0       0       0
  1282 ;;      Totals:         4       0       0       0       0
  1283 ;;Total ram usage:        4 bytes
  1284 ;; Hardware stack levels used: 1
  1285 ;; Hardware stack levels required when called: 3
  1286 ;; This function calls:
  1287 ;;		_LCD_PulseEnable
  1288 ;; This function is called by:
  1289 ;;		_LCD_SendByte
  1290 ;;		_LCD_Init
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294     065A                     _LCD_SendNibble:	
  1295                           ;psect for function _LCD_SendNibble
  1296                           
  1297                           
  1298                           ;incstack = 0
  1299                           ; Regs used in _LCD_SendNibble: [wreg+status,2+status,0+pclath+cstack]
  1300                           ;LCD_SendNibble@nibble stored from wreg
  1301     065A  00F5               	movwf	LCD_SendNibble@nibble
  1302     065B                     l792:
  1303                           
  1304                           ;main.c: 82:     LCD_SendByte(0x01, 0);
  1305     065B  0873               	movf	LCD_SendNibble@mode,w
  1306     065C  1D03               	btfss	3,2
  1307     065D  2E5F               	goto	u171
  1308     065E  2E61               	goto	u170
  1309     065F                     u171:
  1310     065F  3001               	movlw	1
  1311     0660  2E62               	goto	u180
  1312     0661                     u170:
  1313     0661  3000               	movlw	0
  1314     0662                     u180:
  1315     0662  00F4               	movwf	??_LCD_SendNibble
  1316     0663  0875               	movf	LCD_SendNibble@nibble,w
  1317     0664  39F0               	andlw	240
  1318     0665  0474               	iorwf	??_LCD_SendNibble,w
  1319     0666  3808               	iorlw	8
  1320     0667  00F6               	movwf	LCD_SendNibble@data
  1321     0668                     l794:
  1322                           
  1323                           ;main.c: 83:     _delay((unsigned long)((2)*(20000000/4000.0)));
  1324     0668  0876               	movf	LCD_SendNibble@data,w
  1325     0669  120A  118A  26E3  120A  118A  	fcall	_LCD_PulseEnable
  1326     066E                     l54:
  1327     066E  0008               	return
  1328     066F                     __end_of_LCD_SendNibble:
  1329                           
  1330                           	psect	text10
  1331     06E3                     __ptext10:	
  1332 ;; *************** function _LCD_PulseEnable *****************
  1333 ;; Defined at:
  1334 ;;		line 71 in file "main.c"
  1335 ;; Parameters:    Size  Location     Type
  1336 ;;  data            1    wreg     unsigned char 
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;  data            1    2[COMMON] unsigned char 
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  1    wreg      void 
  1341 ;; Registers used:
  1342 ;;		wreg, status,2, status,0, pclath, cstack
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1348 ;;      Params:         0       0       0       0       0
  1349 ;;      Locals:         1       0       0       0       0
  1350 ;;      Temps:          1       0       0       0       0
  1351 ;;      Totals:         2       0       0       0       0
  1352 ;;Total ram usage:        2 bytes
  1353 ;; Hardware stack levels used: 1
  1354 ;; Hardware stack levels required when called: 2
  1355 ;; This function calls:
  1356 ;;		_I2C_Start
  1357 ;;		_I2C_Stop
  1358 ;;		_I2C_Write
  1359 ;; This function is called by:
  1360 ;;		_LCD_SendNibble
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364     06E3                     _LCD_PulseEnable:	
  1365                           ;psect for function _LCD_PulseEnable
  1366                           
  1367                           
  1368                           ;incstack = 0
  1369                           ; Regs used in _LCD_PulseEnable: [wreg+status,2+status,0+pclath+cstack]
  1370                           ;LCD_PulseEnable@data stored from wreg
  1371     06E3  00F2               	movwf	LCD_PulseEnable@data
  1372     06E4                     l786:
  1373                           
  1374                           ;main.c: 72:     LCD_SendNibble(0x30, 0);
  1375     06E4  120A  118A  2612  120A  118A  	fcall	_I2C_Start
  1376                           
  1377                           ;main.c: 73:     LCD_SendNibble(0x20, 0);
  1378     06E9  304E               	movlw	78
  1379     06EA  120A  118A  2624  120A  118A  	fcall	_I2C_Write
  1380                           
  1381                           ;main.c: 74: 
  1382     06EF  0872               	movf	LCD_PulseEnable@data,w
  1383     06F0  3804               	iorlw	4
  1384     06F1  120A  118A  2624  120A  118A  	fcall	_I2C_Write
  1385     06F6                     l788:
  1386                           
  1387                           ;main.c: 75:     LCD_SendByte(0x28, 0);
  1388     06F6  2EF7               	nop2	;2 cycle nop
  1389     06F7  2EF8               	nop2	;2 cycle nop
  1390     06F8  0000               	nop
  1391                           
  1392                           ;main.c: 76:     LCD_SendByte(0x0C, 0);
  1393     06F9  0872               	movf	LCD_PulseEnable@data,w
  1394     06FA  39FB               	andlw	251
  1395     06FB  120A  118A  2624  120A  118A  	fcall	_I2C_Write
  1396                           
  1397                           ;main.c: 77:     LCD_SendByte(0x06, 0);
  1398     0700  120A  118A  261B  120A  118A  	fcall	_I2C_Stop
  1399     0705                     l790:
  1400                           
  1401                           ;main.c: 78:     LCD_Clear();
  1402     0705  3053               	movlw	83
  1403     0706  00F1               	movwf	??_LCD_PulseEnable
  1404     0707                     u347:
  1405     0707  0BF1               	decfsz	??_LCD_PulseEnable,f
  1406     0708  2F07               	goto	u347
  1407     0709                     l51:
  1408     0709  0008               	return
  1409     070A                     __end_of_LCD_PulseEnable:
  1410                           
  1411                           	psect	text11
  1412     0624                     __ptext11:	
  1413 ;; *************** function _I2C_Write *****************
  1414 ;; Defined at:
  1415 ;;		line 63 in file "main.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;  data            1    wreg     unsigned char 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  data            1    0[COMMON] unsigned char 
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  1    wreg      void 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, status,0, pclath, cstack
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1429 ;;      Params:         0       0       0       0       0
  1430 ;;      Locals:         1       0       0       0       0
  1431 ;;      Temps:          0       0       0       0       0
  1432 ;;      Totals:         1       0       0       0       0
  1433 ;;Total ram usage:        1 bytes
  1434 ;; Hardware stack levels used: 1
  1435 ;; Hardware stack levels required when called: 1
  1436 ;; This function calls:
  1437 ;;		_I2C_Wait
  1438 ;; This function is called by:
  1439 ;;		_LCD_PulseEnable
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443     0624                     _I2C_Write:	
  1444                           ;psect for function _I2C_Write
  1445                           
  1446                           
  1447                           ;incstack = 0
  1448                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  1449                           ;I2C_Write@data stored from wreg
  1450     0624  00F0               	movwf	I2C_Write@data
  1451     0625                     l782:
  1452                           
  1453                           ;main.c: 64: }
  1454     0625  120A  118A  262F  120A  118A  	fcall	_I2C_Wait
  1455     062A                     l784:
  1456                           
  1457                           ;main.c: 65: 
  1458     062A  0870               	movf	I2C_Write@data,w
  1459     062B  1283               	bcf	3,5	;RP0=0, select bank0
  1460     062C  1303               	bcf	3,6	;RP1=0, select bank0
  1461     062D  0093               	movwf	19	;volatile
  1462     062E                     l48:
  1463     062E  0008               	return
  1464     062F                     __end_of_I2C_Write:
  1465                           
  1466                           	psect	text12
  1467     061B                     __ptext12:	
  1468 ;; *************** function _I2C_Stop *****************
  1469 ;; Defined at:
  1470 ;;		line 58 in file "main.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;		None
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;		None
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  1    wreg      void 
  1477 ;; Registers used:
  1478 ;;		wreg, status,2, status,0, pclath, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 0/0
  1481 ;;		On exit  : 0/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1484 ;;      Params:         0       0       0       0       0
  1485 ;;      Locals:         0       0       0       0       0
  1486 ;;      Temps:          0       0       0       0       0
  1487 ;;      Totals:         0       0       0       0       0
  1488 ;;Total ram usage:        0 bytes
  1489 ;; Hardware stack levels used: 1
  1490 ;; Hardware stack levels required when called: 1
  1491 ;; This function calls:
  1492 ;;		_I2C_Wait
  1493 ;; This function is called by:
  1494 ;;		_LCD_PulseEnable
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498     061B                     _I2C_Stop:	
  1499                           ;psect for function _I2C_Stop
  1500                           
  1501     061B                     l778:	
  1502                           ;incstack = 0
  1503                           ; Regs used in _I2C_Stop: [wreg+status,2+status,0+pclath+cstack]
  1504                           
  1505                           
  1506                           ;main.c: 59: }
  1507     061B  120A  118A  262F  120A  118A  	fcall	_I2C_Wait
  1508     0620                     l780:
  1509                           
  1510                           ;main.c: 60: 
  1511     0620  1683               	bsf	3,5	;RP0=1, select bank1
  1512     0621  1303               	bcf	3,6	;RP1=0, select bank1
  1513     0622  1511               	bsf	17,2	;volatile
  1514     0623                     l45:
  1515     0623  0008               	return
  1516     0624                     __end_of_I2C_Stop:
  1517                           
  1518                           	psect	text13
  1519     0612                     __ptext13:	
  1520 ;; *************** function _I2C_Start *****************
  1521 ;; Defined at:
  1522 ;;		line 53 in file "main.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;		None
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;		None
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      void 
  1529 ;; Registers used:
  1530 ;;		wreg, status,2, status,0, pclath, cstack
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1536 ;;      Params:         0       0       0       0       0
  1537 ;;      Locals:         0       0       0       0       0
  1538 ;;      Temps:          0       0       0       0       0
  1539 ;;      Totals:         0       0       0       0       0
  1540 ;;Total ram usage:        0 bytes
  1541 ;; Hardware stack levels used: 1
  1542 ;; Hardware stack levels required when called: 1
  1543 ;; This function calls:
  1544 ;;		_I2C_Wait
  1545 ;; This function is called by:
  1546 ;;		_LCD_PulseEnable
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550     0612                     _I2C_Start:	
  1551                           ;psect for function _I2C_Start
  1552                           
  1553     0612                     l774:	
  1554                           ;incstack = 0
  1555                           ; Regs used in _I2C_Start: [wreg+status,2+status,0+pclath+cstack]
  1556                           
  1557                           
  1558                           ;main.c: 54: }
  1559     0612  120A  118A  262F  120A  118A  	fcall	_I2C_Wait
  1560     0617                     l776:
  1561                           
  1562                           ;main.c: 55: 
  1563     0617  1683               	bsf	3,5	;RP0=1, select bank1
  1564     0618  1303               	bcf	3,6	;RP1=0, select bank1
  1565     0619  1411               	bsf	17,0	;volatile
  1566     061A                     l42:
  1567     061A  0008               	return
  1568     061B                     __end_of_I2C_Start:
  1569                           
  1570                           	psect	text14
  1571     062F                     __ptext14:	
  1572 ;; *************** function _I2C_Wait *****************
  1573 ;; Defined at:
  1574 ;;		line 49 in file "main.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;		None
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;		None
  1579 ;; Return value:  Size  Location     Type
  1580 ;;                  1    wreg      void 
  1581 ;; Registers used:
  1582 ;;		wreg, status,2
  1583 ;; Tracked objects:
  1584 ;;		On entry : 0/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1588 ;;      Params:         0       0       0       0       0
  1589 ;;      Locals:         0       0       0       0       0
  1590 ;;      Temps:          0       0       0       0       0
  1591 ;;      Totals:         0       0       0       0       0
  1592 ;;Total ram usage:        0 bytes
  1593 ;; Hardware stack levels used: 1
  1594 ;; This function calls:
  1595 ;;		Nothing
  1596 ;; This function is called by:
  1597 ;;		_I2C_Start
  1598 ;;		_I2C_Stop
  1599 ;;		_I2C_Write
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603     062F                     _I2C_Wait:	
  1604                           ;psect for function _I2C_Wait
  1605                           
  1606     062F                     l768:	
  1607                           ;incstack = 0
  1608                           ; Regs used in _I2C_Wait: [wreg+status,2]
  1609                           
  1610     062F                     l770:	
  1611                           ;main.c: 50:     _delay((unsigned long)((1)*(20000000/4000000.0)));
  1612                           
  1613     062F  1683               	bsf	3,5	;RP0=1, select bank1
  1614     0630  1303               	bcf	3,6	;RP1=0, select bank1
  1615     0631  0811               	movf	17,w	;volatile
  1616     0632  391F               	andlw	31
  1617     0633  1D03               	btfss	3,2
  1618     0634  2E36               	goto	u151
  1619     0635  2E37               	goto	u150
  1620     0636                     u151:
  1621     0636  2E2F               	goto	l770
  1622     0637                     u150:
  1623     0637                     l772:
  1624     0637  1914               	btfsc	20,2	;volatile
  1625     0638  2E3A               	goto	u161
  1626     0639  2E3B               	goto	u160
  1627     063A                     u161:
  1628     063A  2E2F               	goto	l770
  1629     063B                     u160:
  1630     063B                     l39:
  1631     063B  0008               	return
  1632     063C                     __end_of_I2C_Wait:
  1633     0002                     ___latbits      equ	2
  1634     007E                     btemp           set	126	;btemp
  1635     007E                     wtemp0          set	126
  1636                           
  1637                           	psect	config
  1638                           
  1639                           ;Config register CONFIG @ 0x2007
  1640                           ;	Oscillator Selection bits
  1641                           ;	FOSC = HS, HS oscillator
  1642                           ;	Watchdog Timer Enable bit
  1643                           ;	WDTE = OFF, WDT disabled
  1644                           ;	Power-up Timer Enable bit
  1645                           ;	PWRTE = ON, PWRT enabled
  1646                           ;	Brown-out Reset Enable bit
  1647                           ;	BOREN = ON, BOR enabled
  1648                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1649                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1650                           ;	Data EEPROM Memory Code Protection bit
  1651                           ;	CPD = OFF, Data EEPROM code protection off
  1652                           ;	Flash Program Memory Write Enable bits
  1653                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1654                           ;	In-Circuit Debugger Mode bit
  1655                           ;	DEBUG = 0x1, unprogrammed default
  1656                           ;	Flash Program Memory Code Protection bit
  1657                           ;	CP = OFF, Code protection off
  1658     2007                     	org	8199
  1659     2007  3F72               	dw	16242

Data Sizes:
    Strings     52
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80      7       7
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Print@str	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_1(CODE[11]), STR_2(CODE[10]), STR_3(CODE[12]), STR_4(CODE[9]), 
		 -> STR_5(CODE[10]), 


Critical Paths under _main in COMMON

    _ON_MODE->_LCD_Clear
    _LCD_Init->_LCD_Clear
    _AUTO_MODE->_LCD_Clear
    _LCD_SetCursor->_LCD_SendByte
    _LCD_Print->_LCD_SendByte
    _LCD_Clear->_LCD_SendByte
    _LCD_SendByte->_LCD_SendNibble
    _LCD_SendNibble->_LCD_PulseEnable
    _LCD_PulseEnable->_I2C_Write

Critical Paths under _main in BANK0

    _main->_LCD_SetCursor
    _ON_MODE->_LCD_SetCursor
    _AUTO_MODE->_LCD_SetCursor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3442
                                              4 BANK0      3     3      0
                          _AUTO_MODE
                           _I2C_Init
                           _LCD_Init
                          _LCD_Print
                      _LCD_SetCursor
                            _ON_MODE
 ---------------------------------------------------------------------------------
 (1) _ON_MODE                                              0     0      0    1000
                          _LCD_Clear
                          _LCD_Print
                      _LCD_SetCursor
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             3     3      0     717
                                              0 BANK0      3     3      0
                          _LCD_Clear
                       _LCD_SendByte
                     _LCD_SendNibble
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AUTO_MODE                                            0     0      0    1000
                          _LCD_Clear
                          _LCD_Print
                      _LCD_SetCursor
 ---------------------------------------------------------------------------------
 (2) _LCD_SetCursor                                        5     4      1     400
                                             10 COMMON     1     0      1
                                              0 BANK0      4     4      0
                       _LCD_SendByte
 ---------------------------------------------------------------------------------
 (2) _LCD_Print                                            1     0      1     325
                                             10 COMMON     1     0      1
                       _LCD_SendByte
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            2     2      0     275
                                             10 COMMON     2     2      0
                       _LCD_SendByte
 ---------------------------------------------------------------------------------
 (3) _LCD_SendByte                                         3     2      1     275
                                              7 COMMON     3     2      1
                     _LCD_SendNibble
 ---------------------------------------------------------------------------------
 (4) _LCD_SendNibble                                       4     3      1     167
                                              3 COMMON     4     3      1
                    _LCD_PulseEnable
 ---------------------------------------------------------------------------------
 (5) _LCD_PulseEnable                                      2     2      0      87
                                              1 COMMON     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (6) _I2C_Write                                            1     1      0      29
                                              0 COMMON     1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (7) _I2C_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AUTO_MODE
     _LCD_Clear
       _LCD_SendByte
         _LCD_SendNibble
           _LCD_PulseEnable
             _I2C_Start
               _I2C_Wait
             _I2C_Stop
               _I2C_Wait
             _I2C_Write
               _I2C_Wait
     _LCD_Print
       _LCD_SendByte
     _LCD_SetCursor
       _LCD_SendByte
   _I2C_Init
   _LCD_Init
     _LCD_Clear
     _LCD_SendByte
     _LCD_SendNibble
   _LCD_Print
   _LCD_SetCursor
   _ON_MODE
     _LCD_Clear
     _LCD_Print
     _LCD_SetCursor

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     12      12     85.7%
BANK0               80      7       7      8.8%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      19      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Apr 29 16:33:24 2025

                      pc 0002                       l33 0648                       l42 061A  
                     l51 0709                       l60 07FB                       l45 0623  
                     l54 066E                       l70 06E2                       l39 063B  
                     l63 0659                       l48 062E                       l57 06A3  
                     l81 071C                       l83 0756                       l76 06C1  
                     l69 06D9                       l93 077D                       l86 0686  
                     l94 077E                       fsr 0004            _LCD_SetCursor 06C2  
                    l700 0647                      l800 0650                      l810 06A4  
                    l802 06C5                      l812 06A5                      l804 06CA  
                    l820 07B4                      l814 06B3                      l806 06D2  
                    l830 07E1                      l822 07BB                      l816 06B5  
                    l808 06DB                      l840 0710                      l832 07E8  
                    l824 07CD                      l770 062F                      l850 0730  
                    l842 0714                      l834 07EF                      l826 07D3  
                    l818 07A6                      l772 0637                      l780 0620  
                    l852 0740                      l844 0718                      l692 063C  
                    l836 07F6                      l828 07DA                      l860 067C  
                    l774 0612                      l782 0625                      l790 0705  
                    l854 074C                      l846 071D                      l838 070A  
                    l694 0640                      l862 0683                      l870 0766  
                    l768 062F                      l776 0617                      l784 062A  
                    l792 065B                      l856 0753                      l848 0729  
                    l696 0643                      l880 078C                      l872 076C  
                    l864 0757                      l778 061B                      l786 06E4  
                    l794 0668                      l698 0646                      l858 066F  
                    l882 0793                      l874 0771                      l866 075C  
                    l788 06F6                      l796 0688                      l876 0777  
                    l868 0761                      l798 0649                      l878 0784  
                    u200 06CA                      u201 06C9                      u210 06C1  
                    u211 06C0                      u220 0710                      u221 070F  
                    u150 0637                      u230 0714                      u151 0636  
                    u231 0713                      u160 063B                      u240 0718  
                    u161 063A                      u241 0717                      u170 0661  
                    u250 071C                      u171 065F                      u251 071B  
                    u307 07AE                      u180 0662                      u260 076C  
                    u317 07C1                      u261 076B                      u270 0777  
                    u327 07D1                      u271 0776                      u280 0784  
                    _PEN 048A                      u337 0654                      u281 0783  
                    u347 0707                      u195 0696                      u297 079B  
                    _SEN 0488                      fsr0 0004           _LCD_SendNibble 065A  
          ?_LCD_SendByte 0077                     STR_1 0015                     STR_2 0020  
                   STR_3 0009                     STR_4 0034                     STR_5 002A  
        __end_of_ON_MODE 0687                     _main 0757         __end_of_I2C_Init 0649  
                   btemp 007E         __end_of_I2C_Wait 063C         __end_of_I2C_Stop 0624  
                   start 0000      LCD_PulseEnable@data 0072         __end_of_LCD_Init 07FC  
         ?_LCD_SetCursor 007A                    ?_main 0070   __end_of_LCD_SendNibble 066F  
                  _TRISD 0088           ??_LCD_SendByte 0078        __end_of_I2C_Start 061B  
      __end_of_I2C_Write 062F                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07A6  
                 ??_main 0024        __end_of_LCD_Clear 065A        __end_of_AUTO_MODE 0757  
        ?_LCD_SendNibble 0073        __end_of_LCD_Print 06C2                ??_ON_MODE 007C  
           LCD_Print@str 007A          _LCD_PulseEnable 06E3                   _SSPADD 0093  
                 _TRISC3 043B                   _TRISC4 043C                   _SSPCON 0014  
                 _SSPBUF 0013          ??_LCD_SetCursor 007B                ?_I2C_Init 0070  
              ?_I2C_Wait 0070                ?_I2C_Stop 0070  __end_of__initialization 07FC  
              ?_LCD_Init 0070           __pcstackCOMMON 0070     __end_of_LCD_SendByte 06A4  
      _LCD_SetCursor$133 0021               ??_I2C_Init 0070               ??_I2C_Wait 0070  
             ??_I2C_Stop 0070  __end_of_LCD_PulseEnable 070A               ??_LCD_Init 0020  
             __pmaintext 0757                  _ON_MODE 066F                  _SSPCON2 0091  
                _SSPSTAT 0094               __stringtab 0003                _I2C_Start 0612  
              _I2C_Write 0624         ??_LCD_SendNibble 0074         LCD_SendByte@mode 0077  
                __ptext1 066F                  __ptext2 07A6                  __ptext3 063C  
                __ptext4 070A                  __ptext5 06C2                  __ptext6 06A4  
                __ptext7 0649                  __ptext8 0687                  __ptext9 065A  
       ?_LCD_PulseEnable 0070                _LCD_Clear 0649                _AUTO_MODE 070A  
              _LCD_Print 06A4     end_of_initialization 07FC         LCD_SetCursor@col 007A  
       LCD_SetCursor@row 0020               ?_I2C_Start 0070               ?_I2C_Write 0070  
              _PORTCbits 0007                _PORTDbits 0008                _TRISBbits 0086  
             ?_LCD_Clear 0070               ?_AUTO_MODE 0070               ?_LCD_Print 007A  
           _LCD_SendByte 0687    __end_of_LCD_SetCursor 06E3      start_initialization 07FC  
            ??_I2C_Start 0070              ??_I2C_Write 0070                ___latbits 0002  
          __pcstackBANK0 0020              ??_LCD_Clear 007A              ??_AUTO_MODE 007C  
               ?_ON_MODE 0070              ??_LCD_Print 007B       LCD_SendNibble@data 0076  
     LCD_SendNibble@mode 0073                __pstrings 0003                 _I2C_Init 063C  
               _I2C_Wait 062F                 _I2C_Stop 061B     LCD_SendNibble@nibble 0075  
               _LCD_Init 07A6              __stringbase 0008            I2C_Write@data 0070  
     __end_of__stringtab 0009        LCD_SendByte@value 0079                 __ptext10 06E3  
               __ptext11 0624                 __ptext12 061B                 __ptext13 0612  
               __ptext14 062F        LCD_SetCursor@addr 0023                stringcode 0003  
      ??_LCD_PulseEnable 0071                 stringdir 0003                 stringtab 0003  
